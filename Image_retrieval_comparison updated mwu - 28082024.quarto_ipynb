{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Image Retrieval\"\n",
        "date: today\n",
        "date-format: long\n",
        "author: \"Steven  Ndung'u et al.\"\n",
        "format:\n",
        "  html:\n",
        "    toc: false\n",
        "    toc-depth: 3\n",
        "    toc-location: left\n",
        "    page-layout: full\n",
        "    theme:\n",
        "          light: flatly\n",
        "          dark: darkly\n",
        "    number-sections: false\n",
        "    highlighting: true\n",
        "    smooth-scroll: true\n",
        "    code-fold: true\n",
        "    highlighting-style: GitHub\n",
        "    self-contained: true\n",
        "execute:\n",
        "    echo: true\n",
        "    warning: false\n",
        "    enable: true\n",
        "\n",
        "title-block-banner: true\n",
        "\n",
        "---\n",
        "\n",
        "```{=html}\n",
        "<style type=\"text/css\">\n",
        "\n",
        "h1.title {\n",
        "  font-size: 0px;\n",
        "  color: White;\n",
        "  text-align: center;\n",
        "}\n",
        "h4.author { /* Header 4 - and the author and data headers use this too  */\n",
        "    font-size: 16px;\n",
        "  font-family: \"Source Sans Pro Semibold\", Times, serif;\n",
        "  color: Red;\n",
        "  text-align: center;\n",
        "}\n",
        "h4.date { /* Header 4 - and the author and data headers use this too  */\n",
        "  font-size: 16px;\n",
        "  font-family: \"Source Sans Pro Semibold\", Times, serif;\n",
        "  color: Red;\n",
        "  text-align: center;\n",
        "}\n",
        "</style>\n",
        "```\n",
        "\n",
        "\n",
        "------------------------------------------------------------------------\n",
        ":::{.column-page}\n",
        "\n",
        "::: {style=\"text-align:center\"}\n",
        "<h2>Model Evaluation COSFIRE Filters Approach</h2>\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "# Introduction\n",
        "\n",
        "We obtain the 26 statistically significant sets of hyperparameters from the classification paper along with their respective training, validation, and test descriptors. Based on these descriptors, we perform image hashing for each set of descriptors using a selected set of MLP hyperparameters (for the grid search). \n"
      ],
      "id": "07848759"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "###################################################\n",
        "\n",
        "###################################################\n",
        "#$Env:QUARTO_PYTHON = \"C:\\Users\\P307791\\Anaconda3\\python.exe\"\n",
        "import os\n",
        "os.environ['PYTHONHASHSEED'] = 'python'\n",
        "from scipy import stats\n",
        "\n",
        "from IPython.display import display, Markdown, HTML\n",
        "from itables import init_notebook_mode\n",
        "init_notebook_mode(all_interactive=True)\n",
        "from itables import show\n",
        "\n",
        "import torch.nn as nn\n",
        "\n",
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "import plotly.io as pio\n",
        "#pio.renderers.default = \"notebook\"\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import re\n",
        "from scipy import stats\n",
        "\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def find_max(row):\n",
        "    return row.max()\n",
        "\n",
        "\n",
        "def colsum(x):\n",
        "    return sum(np.isnan(x))\n",
        "\n",
        "\n",
        "# l1_reg_values = [0,0.0001, 0.00001, 1e-8]\n",
        "# l2_reg_values = [0,0.0001, 0.00001, 1e-8]\n",
        "\n",
        "# l1_reg_values = [0,1e-8]\n",
        "# l2_reg_values = [0,1e-8]\n",
        "\n",
        "# query = (\n",
        "#     \"output_size == @output_size and \"\n",
        "#     \"l1_reg in @l1_reg_values and \"\n",
        "#     \"l2_reg in @l2_reg_values\"\n",
        "# )\n"
      ],
      "id": "2ad4cc77",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The outputs below represent an example of a single experiment based on an array of hyperparameters considered to determine the optimal configuration of the MLP hashing architecture (For bit size 32).\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "tiply, each row represents a unique combination of MLP hyperparameters, and every column represents the results yielded by each of the 26 statistically significant sets of descriptors. \n",
        "\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "\n",
        "In these experiments, we have considered four different bit sizes.\n",
        "\n",
        "\n",
        "##  Bit size 48\n",
        "\n",
        "\n",
        "The results in this presentation are from two experimental designs:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "The thresholding is based on fixed values between -1 and 1 on a step size of 0.1.\n",
        "\n",
        "\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "7d722256"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "layer_vsn = 'v3_layers'\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"final paper results/merged_validation_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"final paper results/merged_test_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 48\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size \"\n",
        ")\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "93007cf0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "7ffe1f87",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "b957622a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "9fdb04a4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "07d37a91"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "cfb5fae4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(10)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "0ebbbb5f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "0afb30b0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "bdf2e011",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "dec42a74",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "6630d450",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "30b725df"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "b83228d6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "813e1f04"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid_mwu_48 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid_mwu_48.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "78d09693",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "60269c50"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']].reset_index()\n",
        "\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "018383b6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test_mwu_48 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test_mwu_48.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "59f0933e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "83cdc808"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| \n",
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "\n",
        "res_valid_mwu_48['id'] = res_valid_mwu_48.index.to_series().apply(extract_number)\n",
        "res_test_mwu_48['id'] = res_test_mwu_48.index.to_series().apply(extract_number)\n",
        "\n",
        "res_comb = pd.concat([res_valid_mwu_48,res_test_mwu_48])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test_mwu_48 = res_test_mwu_48.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "\n",
        "res_valid_mwu_48 =  res_valid_mwu_48.reset_index(drop=True)\n",
        "res_valid_mwu_48.columns = ['valid_score', 'std', 'id']\n",
        "res_valid_mwu_48 = res_valid_mwu_48[['valid_score', 'id']]\n",
        "\n",
        "res_test_mwu_48.columns = ['label2', 'test_score', 'std', 'id']\n",
        "res_test_mwu_48 = res_test_mwu_48[['test_score', 'id']]\n",
        "\n",
        "\n",
        "result_merged_mwu_48 = pd.merge(res_valid_mwu_48,res_test_mwu_48,on='id')\n",
        "\n",
        "\n",
        "result_merged_mwu_48.sort_values(by=['valid_score'], ascending=False,inplace=True)\n",
        "\n",
        "result_merged_mwu_48 = result_merged_mwu_48[['id','valid_score','test_score']]\n",
        "\n",
        "html_table = result_merged_mwu_48.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "#data_range2 = np.array(list(res_test_mwu_48['mean']) + list(res_valid_mwu_48['mean']))\n",
        "\n",
        "# categories = [str(i) for i in range(1,26)]\n",
        "# fig = go.Figure()\n",
        "\n",
        "# # Valid\n",
        "# fig.add_trace(go.Scatterpolar(\n",
        "#        r=list(res_test_mwu_48['mean']),\n",
        "#       theta=categories,\n",
        "#       #fill='toself',\n",
        "#       name='Test'\n",
        "# ))\n",
        "\n",
        "# # Test\n",
        "# fig.add_trace(go.Scatterpolar(\n",
        "#       r=list(res_valid_mwu_48['mean']),\n",
        "#       theta=categories,\n",
        "#       #fill='toself',\n",
        "#       name='Valid'\n",
        "# ))\n",
        "\n",
        "# # Customization of chart\n",
        "# fig.update_layout(\n",
        "#   title={\n",
        "#       'text': \"\",\n",
        "#          'xanchor': 'center',\n",
        "#       'yanchor': 'top'\n",
        "#   },\n",
        "#   polar=dict(\n",
        "#     radialaxis=dict(\n",
        "#       visible=True,\n",
        "#       range=[88, 93]\n",
        "#     )),\n",
        "#   showlegend=True\n",
        "# )\n",
        "\n",
        "# fig.show()\n",
        "# fig.write_image(\"MU_Test.png\")"
      ],
      "id": "92f1cd7d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##  Bit size 32\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "cbc688cf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"final paper results/merged_validation_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"final paper results/merged_test_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 32\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size \"\n",
        ")\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "261acbbe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "62906703",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "84ffbb0d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "0e790d45",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "5a1a999d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "5ff03fa4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(10)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "df2a3bf3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "63db3c5d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "26cf7c4a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "433955fc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "dt_mw11 = dt_mw[list(dt_mw.columns[dt_mw.columns.str.startswith('mAP_valid')])]\n",
        "# Apply the function row-wise\n",
        "dt_mw11['max_map'] = dt_mw11.apply(np.max, axis=1)\n",
        "dt_mw11 = dt_mw11.sort_values(by = ['max_map'],ascending=False)\n",
        "\n",
        "html_table = dt_mw11.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "5ca5ddab",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "cf45f0f5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "bddcbad3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "1f1f0af6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "909c6ed7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid_mwu_32 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid_mwu_32.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "56e89576",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "0a90cb52"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "optimal_params.to_csv('optimal_params_32bit.csv',index=False)\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "352db926",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test_mwu_32 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test_mwu_32.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "41e08bcc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "94d0e770"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "res_valid_mwu_32['id'] = res_valid_mwu_32.index.to_series().apply(extract_number)\n",
        "res_test_mwu_32['id'] = res_test_mwu_32.index.to_series().apply(extract_number)\n",
        "\n",
        "res_comb = pd.concat([res_valid_mwu_32,res_test_mwu_32])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test_mwu_32 = res_test_mwu_32.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "\n",
        "res_valid_mwu_32 =  res_valid_mwu_32.reset_index(drop=True)\n",
        "res_valid_mwu_32.columns = ['valid_score', 'std', 'id']\n",
        "res_valid_mwu_32 = res_valid_mwu_32[['valid_score', 'id']]\n",
        "\n",
        "res_test_mwu_32.columns = ['label2', 'test_score', 'std', 'id']\n",
        "res_test_mwu_32 = res_test_mwu_32[['test_score', 'id']]\n",
        "\n",
        "\n",
        "result_merged_mwu_32 = pd.merge(res_valid_mwu_32,res_test_mwu_32,on='id')\n",
        "\n",
        "\n",
        "result_merged_mwu_32.sort_values(by=['valid_score'], ascending=False,inplace=True)\n",
        "\n",
        "result_merged_mwu_32 = result_merged_mwu_32[['id','valid_score','test_score']]\n",
        "\n",
        "html_table = result_merged_mwu_32.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "b3fb529c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "##  Bit size 24\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "40b0e576"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"final paper results/merged_validation_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"final paper results/merged_test_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 24\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size \"\n",
        ")\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "849ebc66",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "6ced68a5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "684a5247"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "942daa8b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "1cd85add"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "2f52ec03",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(10)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "4cdf09c8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "e3e6f30c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "fd298a6b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "6e45a5cb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "1e8c34e8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "715c141e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "3f696d63",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "3648a395"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid_mwu_24 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid_mwu_24.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "567d9567",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "3b3338a2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "ccfc9491",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test_mwu_24 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test_mwu_24.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "1c88b881",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Summary:\n"
      ],
      "id": "3b82efa9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| \n",
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "\n",
        "res_valid_mwu_24['id'] = res_valid_mwu_24.index.to_series().apply(extract_number)\n",
        "res_test_mwu_24['id'] = res_test_mwu_24.index.to_series().apply(extract_number)\n",
        "\n",
        "res_comb = pd.concat([res_valid_mwu_24,res_test_mwu_24])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test_mwu_24 = res_test_mwu_24.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "\n",
        "res_valid_mwu_24 =  res_valid_mwu_24.reset_index(drop=True)\n",
        "res_valid_mwu_24.columns = ['valid_score', 'std', 'id']\n",
        "res_valid_mwu_24 = res_valid_mwu_24[['valid_score', 'id']]\n",
        "\n",
        "res_test_mwu_24.columns = ['label2', 'test_score', 'std', 'id']\n",
        "res_test_mwu_24 = res_test_mwu_24[['test_score', 'id']]\n",
        "\n",
        "\n",
        "result_merged_mwu_24 = pd.merge(res_valid_mwu_24,res_test_mwu_24,on='id')\n",
        "\n",
        "\n",
        "result_merged_mwu_24.sort_values(by=['valid_score'], ascending=False,inplace=True)\n",
        "\n",
        "result_merged_mwu_24 = result_merged_mwu_24[['id','valid_score','test_score']]\n",
        "\n",
        "html_table = result_merged_mwu_24.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "ec61d6a0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##  Bit size 16\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "6ff3f63f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"final paper results/merged_validation_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"final paper results/merged_test_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 16\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size \"\n",
        ")\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "dc21a90d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "1e3e9275",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "a5a6aea3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "56f645d9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "58ff22c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "34a3bf8e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(10)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "6bf050c6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "0f599d12"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "27673968",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "9b009431",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "341be54c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "d0ee48c4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "29810e2a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "22e47267"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid_mwu_16 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid_mwu_16.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "25a8e673",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "74b4b435"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "b97468be",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test_mwu_16 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test_mwu_16.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "1437521f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Summary:\n"
      ],
      "id": "8c76022a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| \n",
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "\n",
        "res_valid_mwu_16['id'] = res_valid_mwu_16.index.to_series().apply(extract_number)\n",
        "res_test_mwu_16['id'] = res_test_mwu_16.index.to_series().apply(extract_number)\n",
        "\n",
        "res_comb = pd.concat([res_valid_mwu_16,res_test_mwu_16])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test_mwu_16 = res_test_mwu_16.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "\n",
        "res_valid_mwu_16 =  res_valid_mwu_16.reset_index(drop=True)\n",
        "res_valid_mwu_16.columns = ['valid_score', 'std', 'id']\n",
        "res_valid_mwu_16 = res_valid_mwu_16[['valid_score', 'id']]\n",
        "\n",
        "res_test_mwu_16.columns = ['label2', 'test_score', 'std', 'id']\n",
        "res_test_mwu_16 = res_test_mwu_16[['test_score', 'id']]\n",
        "\n",
        "\n",
        "result_merged_mwu_16 = pd.merge(res_valid_mwu_16,res_test_mwu_16,on='id')\n",
        "\n",
        "\n",
        "result_merged_mwu_16.sort_values(by=['valid_score'], ascending=False,inplace=True)\n",
        "\n",
        "result_merged_mwu_16 = result_merged_mwu_16[['id','valid_score','test_score']]\n",
        "\n",
        "html_table = result_merged_mwu_16.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "ef493f9a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##  Bit size 40\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "82c2180d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"final paper results/merged_validation_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"final paper results/merged_test_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 40\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size \"\n",
        ")\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "9c14e981",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "7e1c2b6b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "930a7556"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "3ad2c2b9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "b1f4bc00"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "6c0ea30c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(10)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "594c5d4c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "927b70ce"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "cecaecd2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "7d28dfff",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "1a01662e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "c4f0e234"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "bfcdb7f0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "30dc2e7e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid_mwu_40 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid_mwu_40.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "c9bdc344",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "61c2fde8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "optimal_params.to_csv('optimal_params_40bit.csv',index=False)\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "e7c7a380",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test_mwu_40 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test_mwu_40.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "269a406b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "4ca2a6d0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "res_valid_mwu_40['id'] = res_valid_mwu_40.index.to_series().apply(extract_number)\n",
        "res_test_mwu_40['id'] = res_test_mwu_40.index.to_series().apply(extract_number)\n",
        "\n",
        "res_comb = pd.concat([res_valid_mwu_40,res_test_mwu_40])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test_mwu_40 = res_test_mwu_40.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "\n",
        "res_valid_mwu_40 =  res_valid_mwu_40.reset_index(drop=True)\n",
        "res_valid_mwu_40.columns = ['valid_score', 'std', 'id']\n",
        "res_valid_mwu_40 = res_valid_mwu_40[['valid_score', 'id']]\n",
        "\n",
        "res_test_mwu_40.columns = ['label2', 'test_score', 'std', 'id']\n",
        "res_test_mwu_40 = res_test_mwu_40[['test_score', 'id']]\n",
        "\n",
        "\n",
        "result_merged_mwu_40 = pd.merge(res_valid_mwu_40,res_test_mwu_40,on='id')\n",
        "\n",
        "\n",
        "result_merged_mwu_40.sort_values(by=['valid_score'], ascending=False,inplace=True)\n",
        "\n",
        "result_merged_mwu_40 = result_merged_mwu_40[['id','valid_score','test_score']]\n",
        "\n",
        "html_table = result_merged_mwu_40.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "fbceaf3c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##  Bit size 56\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "ce5cc4de"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"final paper results/merged_validation_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"final paper results/merged_test_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 56\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size \"\n",
        ")\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "9a8fc950",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "2ab295df",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "cecbbfab"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "78d5905c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "90d78b1e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "6508f974",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(10)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "62806742",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "72eaf098"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "abd4731b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "d998f729",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "36c8458a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "08c55c50"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "94c415bb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "9753a45a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid_mwu_56 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid_mwu_56.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "c3731763",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "2b5a50fe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "optimal_params.to_csv('optimal_params_56bit.csv',index=False)\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "5c2d0a35",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test_mwu_56 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test_mwu_56.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "f2b5a31d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "24ba894f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "res_valid_mwu_56['id'] = res_valid_mwu_56.index.to_series().apply(extract_number)\n",
        "res_test_mwu_56['id'] = res_test_mwu_56.index.to_series().apply(extract_number)\n",
        "\n",
        "res_comb = pd.concat([res_valid_mwu_56,res_test_mwu_56])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test_mwu_56 = res_test_mwu_56.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "\n",
        "res_valid_mwu_56 =  res_valid_mwu_56.reset_index(drop=True)\n",
        "res_valid_mwu_56.columns = ['valid_score', 'std', 'id']\n",
        "res_valid_mwu_56 = res_valid_mwu_56[['valid_score', 'id']]\n",
        "\n",
        "res_test_mwu_56.columns = ['label2', 'test_score', 'std', 'id']\n",
        "res_test_mwu_56 = res_test_mwu_56[['test_score', 'id']]\n",
        "\n",
        "\n",
        "result_merged_mwu_56 = pd.merge(res_valid_mwu_56,res_test_mwu_56,on='id')\n",
        "\n",
        "\n",
        "result_merged_mwu_56.sort_values(by=['valid_score'], ascending=False,inplace=True)\n",
        "\n",
        "result_merged_mwu_56 = result_merged_mwu_56[['id','valid_score','test_score']]\n",
        "\n",
        "html_table = result_merged_mwu_56.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "1c814c49",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##  Bit size 64\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "fcf55efa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"final paper results/merged_validation_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"final paper results/merged_test_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 64\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size \"\n",
        ")\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "349c7ec7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "19509add",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "7ed87032"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "05835523",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "05733098"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "fccf57bc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(10)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "6f9a111f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "9926c170"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "123daf2e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "d5e38087",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "18b7b8a9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "3228d7ad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "fce5c9a6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "3617d256"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid_mwu_64 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid_mwu_64.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "a66ba67e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "46b5c36e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "optimal_params.to_csv('optimal_params_64bit.csv',index=False)\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "50834f63",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test_mwu_64 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test_mwu_64.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "c58fc080",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "9139a4ec"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "res_valid_mwu_64['id'] = res_valid_mwu_64.index.to_series().apply(extract_number)\n",
        "res_test_mwu_64['id'] = res_test_mwu_64.index.to_series().apply(extract_number)\n",
        "\n",
        "res_comb = pd.concat([res_valid_mwu_64,res_test_mwu_64])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test_mwu_64 = res_test_mwu_64.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "\n",
        "res_valid_mwu_64 =  res_valid_mwu_64.reset_index(drop=True)\n",
        "res_valid_mwu_64.columns = ['valid_score', 'std', 'id']\n",
        "res_valid_mwu_64 = res_valid_mwu_64[['valid_score', 'id']]\n",
        "\n",
        "res_test_mwu_64.columns = ['label2', 'test_score', 'std', 'id']\n",
        "res_test_mwu_64 = res_test_mwu_64[['test_score', 'id']]\n",
        "\n",
        "\n",
        "result_merged_mwu_64 = pd.merge(res_valid_mwu_64,res_test_mwu_64,on='id')\n",
        "\n",
        "\n",
        "result_merged_mwu_64.sort_values(by=['valid_score'], ascending=False,inplace=True)\n",
        "\n",
        "result_merged_mwu_64 = result_merged_mwu_64[['id','valid_score','test_score']]\n",
        "\n",
        "html_table = result_merged_mwu_64.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "fdf360cf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##  Bit size 72\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "e3ffe4aa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"final paper results/merged_validation_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "dt_test  = pd.read_csv(f\"final paper results/merged_test_runs_wide_format_abs_24082024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 72\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size \"\n",
        ")\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "dfd3eb65",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "06a2c6bf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "8cb32adf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "1ff6babd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "c03172eb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "f1ef0c95",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(10)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "3af12a96",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "86d6a67a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "b565e27e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "f9454480",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "fafb5398",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "3e2e93c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "6bbb652d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "8daa470c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid_mwu_72 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid_mwu_72.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "3b6d4120",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "d3f23816"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "optimal_params.to_csv('optimal_params_72bit.csv',index=False)\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "99dd7064",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test_mwu_72 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test_mwu_72.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "dt = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "dt['max_map'] = dt.apply(np.max, axis=1)\n",
        "dt = dt.sort_values(by=['max_map'], ascending= False)"
      ],
      "id": "ace60e14",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "38a0ec37"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "res_valid_mwu_72['id'] = res_valid_mwu_72.index.to_series().apply(extract_number)\n",
        "res_test_mwu_72['id'] = res_test_mwu_72.index.to_series().apply(extract_number)\n",
        "\n",
        "res_comb = pd.concat([res_valid_mwu_72,res_test_mwu_72])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test_mwu_72 = res_test_mwu_72.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "\n",
        "res_valid_mwu_72 =  res_valid_mwu_72.reset_index(drop=True)\n",
        "res_valid_mwu_72.columns = ['valid_score', 'std', 'id']\n",
        "res_valid_mwu_72 = res_valid_mwu_72[['valid_score', 'id']]\n",
        "\n",
        "res_test_mwu_72.columns = ['label2', 'test_score', 'std', 'id']\n",
        "res_test_mwu_72 = res_test_mwu_72[['test_score', 'id']]\n",
        "\n",
        "\n",
        "result_merged_mwu_72 = pd.merge(res_valid_mwu_72,res_test_mwu_72,on='id')\n",
        "\n",
        "\n",
        "result_merged_mwu_72.sort_values(by=['valid_score'], ascending=False,inplace=True)\n",
        "\n",
        "result_merged_mwu_72 = result_merged_mwu_72[['id','valid_score','test_score']]\n",
        "\n",
        "html_table = result_merged_mwu_72.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "cd4885f6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "a4ffbd63"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# result_merged_mwu_8_best = result_merged_mwu_8.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "# result_merged_mwu_8_best['bit'] = 8\n",
        "result_merged_mwu_16_best = result_merged_mwu_16.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_16_best['bit'] = 16\n",
        "result_merged_mwu_24_best = result_merged_mwu_24.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_24_best['bit'] = 24\n",
        "result_merged_mwu_32_best = result_merged_mwu_32.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_32_best['bit'] = 32\n",
        "result_merged_mwu_40_best = result_merged_mwu_40.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_40_best['bit'] = 40\n",
        "result_merged_mwu_48_best = result_merged_mwu_48.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_48_best['bit'] = 48\n",
        "result_merged_mwu_56_best = result_merged_mwu_56.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_56_best['bit'] = 56\n",
        "result_merged_mwu_64_best = result_merged_mwu_64.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_64_best['bit'] = 64\n",
        "result_merged_mwu_72_best = result_merged_mwu_72.describe().iloc[1:2].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_72_best['bit'] = 72\n",
        "\n",
        "result_merged_mwu_best = pd.concat([result_merged_mwu_16_best,result_merged_mwu_24_best,result_merged_mwu_32_best,result_merged_mwu_40_best,result_merged_mwu_48_best,result_merged_mwu_56_best,result_merged_mwu_64_best,result_merged_mwu_72_best])\n",
        "result_merged_mwu_best = result_merged_mwu_best[['valid_score', 'test_score', 'bit']]\n",
        "\n",
        "df_melted = pd.melt(result_merged_mwu_best, id_vars=['bit'], var_name='Metric', value_name='mAP')\n",
        "\n",
        "\n",
        "# result_merged_mwu_8_std = result_merged_mwu_8.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "# result_merged_mwu_8_std['bit'] = 8\n",
        "result_merged_mwu_16_std = result_merged_mwu_16.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_16_std['bit'] = 16\n",
        "result_merged_mwu_24_std = result_merged_mwu_24.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_24_std['bit'] = 24\n",
        "result_merged_mwu_32_std = result_merged_mwu_32.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_32_std['bit'] = 32\n",
        "result_merged_mwu_40_std = result_merged_mwu_40.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_40_std['bit'] = 40\n",
        "result_merged_mwu_48_std = result_merged_mwu_48.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_48_std['bit'] = 48\n",
        "result_merged_mwu_56_std = result_merged_mwu_56.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_56_std['bit'] = 56\n",
        "result_merged_mwu_64_std = result_merged_mwu_64.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_64_std['bit'] = 64\n",
        "result_merged_mwu_72_std = result_merged_mwu_72.describe().iloc[2:3].reset_index()[['valid_score', 'test_score']]\n",
        "result_merged_mwu_72_std['bit'] = 72\n",
        "\n",
        "result_merged_mwu_std = pd.concat([result_merged_mwu_16_std,result_merged_mwu_24_std,result_merged_mwu_32_std,result_merged_mwu_40_std,result_merged_mwu_48_std,result_merged_mwu_56_std,result_merged_mwu_64_std,result_merged_mwu_72_std])\n",
        "result_merged_mwu_std = result_merged_mwu_std[['valid_score', 'test_score', 'bit']]\n",
        "result_merged_mwu_std.columns = ['valid_score_std', 'test_score_std', 'bit']\n",
        "df_melted_std = pd.melt(result_merged_mwu_std, id_vars=['bit'], var_name='Metric', value_name='mAP')\n",
        "df_melted_std.to_csv('df_melted_std.csv', index=False)\n",
        "df_melted.to_csv('df_melted.csv', index=False)"
      ],
      "id": "ec7b989d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "\n",
        "# import matplotlib.font_manager\n",
        "# matplotlib.font_manager.findSystemFonts(fontpaths=None, fontext='ttf')\n",
        "\n",
        "sns.set_style(\"white\")\n",
        "\n",
        "SMALL_SIZE = 7\n",
        "MEDIUM_SIZE = 7\n",
        "BIGGER_SIZE = 7\n",
        "\n",
        "plt.rc('font', size=SMALL_SIZE)          # controls default text sizes\n",
        "plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\n",
        "plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\n",
        "plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\n",
        "plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\n",
        "plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize\n",
        "#plt.rc('figure', titlesize=BIGGER_SIZE)\n",
        "# Data\n",
        "# Create the plot\n",
        "fig, ax = plt.subplots(figsize=(10/3, 3))\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.legend(loc = 'upper left')\n",
        "# Show the plot\n",
        "plt.rc('font', family='Nimbus Roman')\n",
        "\n",
        "df = pd.merge(result_merged_mwu_best, result_merged_mwu_std, on=['bit'])\n",
        "df = df.query('bit!=8')\n",
        "# Create line plot\n",
        "sns.lineplot(data=df, x='bit', y='test_score',label='Test',  color='blue')\n",
        "sns.lineplot(data=df, x='bit', y='valid_score',label='Valid',  color='red')\n",
        "# sns.lineplot(data=df, x='bit', y='valid_score_std',  color='blue')\n",
        "# sns.lineplot(data=df, x='bit', y='test_score_std',  color='red')\n",
        "# Fill standard deviation envelopes for 'test_score' and 'valid_score'\n",
        "plt.fill_between(df['bit'], df['test_score'] - df['test_score_std'], df['test_score'] + df['test_score_std'], color='#439CEF')\n",
        "plt.fill_between(df['bit'], df['valid_score'] - df['valid_score_std'], df['valid_score'] + df['valid_score_std'], color='#ffbaba')\n",
        "\n",
        "plt.scatter(72, df['test_score'].iloc[7], color='blue', marker='o', s=25)\n",
        "plt.scatter(72, df['valid_score'].iloc[7], color='red', marker='o', s=25)\n",
        "\n",
        "ax.set_ylabel('mAP')\n",
        "ax.set_xlabel('Bit size')\n",
        "ax = plt.gca()\n",
        "# Set y-axis to start from a specific value\n",
        "plt.ylim(85, 93)\n",
        "\n",
        "# Set x-axis labels and ticks\n",
        "x_labels = np.unique(np.array(df.bit))\n",
        "plt.xticks(ticks=x_labels, labels=x_labels)\n",
        "plt.grid(False)\n",
        "# Show the plot\n",
        "plt.tight_layout()\n",
        "plt.savefig('paper images/valid_test.svg',format='svg', dpi=1200)\n",
        "plt.show()\n",
        "\n",
        "print('average performance for all the 26 discriptors in 72 bit: ')\n",
        "res = result_merged_mwu_72[['valid_score','test_score']].describe()\n",
        "\n",
        "html_table = res.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 500px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "0c374dfb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "303edb6c"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\P307791\\Anaconda3\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}