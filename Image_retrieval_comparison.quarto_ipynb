{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Image Retrieval\"\n",
        "date: today\n",
        "date-format: long\n",
        "author: \"Steven  Ndung'u et al.\"\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    toc-location: left\n",
        "    page-layout: full\n",
        "    theme:\n",
        "          light: flatly\n",
        "          dark: darkly\n",
        "    number-sections: false\n",
        "    highlighting: true\n",
        "    smooth-scroll: true\n",
        "    code-fold: true\n",
        "    highlighting-style: GitHub\n",
        "    self-contained: true\n",
        "execute:\n",
        "    echo: true\n",
        "    warning: false\n",
        "    enable: true\n",
        "\n",
        "title-block-banner: true\n",
        "\n",
        "---\n",
        "\n",
        "```{=html}\n",
        "<style type=\"text/css\">\n",
        "\n",
        "h1.title {\n",
        "  font-size: 20px;\n",
        "  color: White;\n",
        "  text-align: center;\n",
        "}\n",
        "h4.author { /* Header 4 - and the author and data headers use this too  */\n",
        "    font-size: 16px;\n",
        "  font-family: \"Source Sans Pro Semibold\", Times, serif;\n",
        "  color: Red;\n",
        "  text-align: center;\n",
        "}\n",
        "h4.date { /* Header 4 - and the author and data headers use this too  */\n",
        "  font-size: 16px;\n",
        "  font-family: \"Source Sans Pro Semibold\", Times, serif;\n",
        "  color: Red;\n",
        "  text-align: center;\n",
        "}\n",
        "</style>\n",
        "```\n",
        "\n",
        "\n",
        "------------------------------------------------------------------------\n",
        ":::{.column-page}\n",
        "\n",
        "::: {style=\"text-align:center\"}\n",
        "<h2>Model Evaluation COSFIRE Filters Approach</h2>\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "The results in this presentation are from two experimental designs:\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "###  Experiment 1 Results\n",
        "\n",
        "We obtain the 26 statistically significant sets of hyperparameters from the classification paper along with their respective training, validation, and test descriptors. Based on these descriptors, we perform image hashing for each set of descriptors using a selected set of MLP hyperparameters (for the grid search). \n",
        "\n",
        "\n",
        "::: {.callout-important}\n",
        "\n",
        "Importantly, each row represents a unique combination of MLP hyperparameters, and every column represents the results yielded by each of the 26 statistically significant sets of descriptors. \n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "NB: The code used is [GitHub](https://GitHub.com/stevenndungu/deep_hashing/blob/main/validation_script_17052024.py)\n"
      ],
      "id": "4b54b8a3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "###################################################\n",
        "# Experiment 1\n",
        "###################################################\n",
        "#$Env:QUARTO_PYTHON = \"C:\\Users\\P307791\\Anaconda3\\python.exe\"\n",
        "from scipy import stats\n",
        "\n",
        "from IPython.display import display, Markdown, HTML\n",
        "from itables import init_notebook_mode\n",
        "init_notebook_mode(all_interactive=True)\n",
        "from itables import show\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "from scipy import stats\n",
        "def find_max(row):\n",
        "    return row.max()\n",
        "\n",
        "\n",
        "def colsum(x):\n",
        "    return sum(np.isnan(x))\n",
        "\n",
        "\n",
        "#%%\n",
        "dt_valid  = pd.read_csv(\"data_results/merged_validation_runs_wide_format_25052024.csv\")\n",
        "dt_valid.sort_values(by=['mAP_valid_22'], ascending=False, inplace=True)\n",
        "\n",
        "\n",
        "dt_valid1 = dt_valid[dt_valid.columns[list(dt_valid.apply(colsum, axis=0)==0)]]\n",
        "\n",
        "dt_test  = pd.read_csv(\"data_results/merged_test_runs_wide_format_25052024.csv\")\n",
        "dt_test.sort_values(by=['mAP_test_22'], ascending=False, inplace=True)\n",
        "\n",
        "dt_test = dt_test[dt_test.columns[list(dt_test.apply(colsum, axis=0)==0)]]\n"
      ],
      "id": "03694c9b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Validation Data mAP Results Preview:\n",
        "\n",
        "Here is the [Google Sheet - Validation Data](https://docs.google.com/spreadsheets/d/1qGltcEiCyVEVmhOki_eRrl1zyGGglFUF9F2XTVoW7jA/edit?usp=sharing) of the data\n"
      ],
      "id": "5727aabf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "d43395f2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n",
        "\n",
        "Here is the [Google Sheet - Test Data](https://docs.google.com/spreadsheets/d/1SjQ3_2DeEBWyASPz52Tm2dnUko_4KaB2RsAsh5AdQyg/edit?usp=sharing)  of the data\n"
      ],
      "id": "b60b94cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "57b4f577",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data\n",
        "\n",
        "</br>\n",
        "\n",
        "The global maximum row:\n"
      ],
      "id": "2741df03"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['max_map'] = dt_valid_sub.apply(find_max, axis=1)\n",
        "\n",
        "dt_valid_sub['max_map'] = dt_valid_sub.apply(find_max, axis=1)\n",
        "dt_valid_sub.sort_values(by='max_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum Value\n",
        "dt_valid_sub['max_map'].max()\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "max_index = dt_valid_sub['max_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)"
      ],
      "id": "31205237",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(1)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 100px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "969e7b6d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "2e9de7f8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues = []\n",
        "pvalues_real = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "  _, p_value = stats.ttest_ind(max_row[:-1][~np.isnan(max_row[:-1])], dt_valid_sub.loc[index][:-1][~np.isnan(dt_valid_sub.loc[index][:-1])], alternative='greater')\n",
        "  pvalues_real.append(p_value)\n",
        "  pvalues.append((p_value>=0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub['pvalues'] = pvalues_real\n",
        "dt_valid_sub['sig'] = pvalues\n",
        "\n",
        "dt_valid_sub1 = dt_valid_sub.query('sig == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "bdaafa29",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "show(dt_valid_sub1)\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_valid_sub1.shape)"
      ],
      "id": "2ca5e10b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "#### Model performance on valid data\n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "68b0be3e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub1.describe().iloc[1:3]\n",
        "\n",
        "res1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "57730919",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on Test data\n",
        "</br>\n",
        "We then pply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "26c52faf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub1.index].iloc[:, :6].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['max_map'] = test_data_1_sub.apply(find_max, axis=1)\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "b19e9e4c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "a47e0467",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "Deep dive in thresholding:\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "#### Descriptors - 22\n",
        "\n",
        "::: {#fig-map_loss_curves layout-ncol=2}\n",
        "\n",
        "![mAP curves](Maps_curves22.png){#fig-map22}\n",
        "\n",
        "![Loss curves](Train_valid_curves_22.png){#fig-loss_curves22}\n",
        "\n",
        "Train, Validation and Test Descriptors hyperparameter set 22\n",
        ":::\n",
        "  \n",
        "#### Descriptors - 26\n",
        "\n",
        "::: {#fig-map_loss_curves2 layout-ncol=2}\n",
        "\n",
        "![mAP curves](Maps_curves26.png){#fig-map26}\n",
        "\n",
        "![Loss curves](Train_valid_curves26.png){#fig-loss_curves26}\n",
        "\n",
        "Train, Validation and Test Descriptors hyperparameter set 26\n",
        "\n",
        ":::\n",
        "\n",
        "#### Hold-out \n",
        "\n",
        "::: {#fig-map_loss_curves3 layout-ncol=2}\n",
        "\n",
        "![mAP curves](Maps_curves_split.png){#fig-map3}\n",
        "\n",
        "![mAP curves](Train_valid_curves26.png){#fig-map31}\n",
        "\n",
        "Train (valid-holdout),  and Test Descriptors - best of the 26 hyperparameter set \n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "### Experiment 2 Results\n",
        "\n",
        "In Experiment 2, we obtained the train and test decriptors of the best validation accuracy from the 26 sets of hyperparameters that achieved statistically significant COSFIRE filters with the validation set during the classification study. Subsequently, the training dataset was divided into training and validation subsets using a hold-out methodology at a ratio of 9:1, which was empirically found to be an optimal hold-out ratio.\n",
        "\n",
        "We then conducted 10 runs for each MLP hyperparameter set during the grid search.\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "Each row represents a unique combination of MLP hyperparameters, and every column represents the results yielded by each of the 10 random runs on the training dataset. The numbers 2, 12, 22,..., 92 represents the seed values used for reproducibility.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.callout-important}\n",
        "This is the approach that was discussed in the last meeting. I have included it in this presentation since I already had some preliminary results and are useful for comparisons.\n",
        ":::\n",
        "\n",
        "NB: The code used is [GitHub](https://GitHub.com/stevenndungu/deep_hashing/blob/main/validation_script_grid_search_17052024.py)\n"
      ],
      "id": "24aad3ad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "###################################################\n",
        "# Experiment 2\n",
        "###################################################\n",
        "\n",
        "\n",
        "df_base_valid = pd.read_csv(\"I:/My Drive/deep_learning/deep_hashing/deep_hashing_GitHub/COSFIRE_26_valid_hyperparameters_descriptors/model_selection_valid_and_13052024_model7_wide_format.csv\")\n",
        "\n",
        "df_base_test= pd.read_csv(\"I:/My Drive/deep_learning/deep_hashing/deep_hashing_GitHub/COSFIRE_26_valid_hyperparameters_descriptors/model_selection_test_and_13052024_model7_wide_format.csv\")\n"
      ],
      "id": "d28c7876",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Validation Data mAP Results Preview:\n",
        "\n",
        "Here is the [Google Sheet Version](https://docs.google.com/spreadsheets/d/1WC40gNFsJhQhw-EFt95JxJcUxgIWqykV_nN-a_jXGT0/edit?usp=sharing) of the data\n"
      ],
      "id": "43951472"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "html_table = df_base_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "667daeda",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Test Data mAP Results Preview:\n",
        "\n",
        "Here is the [Google Sheet Version](https://docs.google.com/spreadsheets/d/1-AdJzAh8rlWpNatnJaxAs9fAZWmYss-miFYamn219e4/edit?usp=sharing) of the data\n"
      ],
      "id": "a39b99fa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "html_table = df_base_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "507277a3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "The global maximum row:\n"
      ],
      "id": "bc1867c6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "################\n",
        "df_base_valid_st = df_base_valid[list(df_base_valid.columns[df_base_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "df_base_valid_st['max_map'] = df_base_valid_st.apply(find_max, axis=1)\n",
        "\n",
        "df_base_valid['max_map'] = df_base_valid.apply(find_max, axis=1)\n",
        "df_base_valid_st.sort_values(by='max_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum Value\n",
        "df_base_valid_st['max_map'].max()\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "max_index = df_base_valid_st['max_map'].idxmax()\n",
        "max_row = df_base_valid_st.loc[max_index]\n",
        "#print(max_row)"
      ],
      "id": "5afeda66",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd_st = df_base_valid_st.head(1)\n",
        "\n",
        "html_table = dd_st.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 100px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "0b78d753",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Statstical Significance:\n"
      ],
      "id": "4e09540b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues = []\n",
        "\n",
        "for _,index in enumerate(df_base_valid_st.index):\n",
        "  _, p_value = stats.ttest_ind(max_row[:-1], df_base_valid_st.loc[index][:-1], alternative='greater')\n",
        "  pvalues.append((p_value>=0.05)*1)\n",
        "  \n",
        "  \n",
        "df_base_valid_st['sig'] = pvalues\n",
        "df_base_valid_st1 = df_base_valid_st.query('sig == 1')\n",
        "\n",
        "\n",
        "max_indexx = df_base_valid_st1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "76074a80",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "show(df_base_valid_st1)"
      ],
      "id": "73dbe4c6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "#### Model performance on valid data\n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "fd957854"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res_st = df_base_valid_st1.describe().iloc[1:3]\n",
        "\n",
        "res1 = res_st.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "7552c60c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on Test data\n",
        "</br>\n",
        "We then pply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "8396c122"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = df_base_valid.iloc[df_base_valid_st1.index].iloc[:, :6].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, df_base_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test_seed')])]\n",
        "test_data_1['max_map'] = test_data_1_sub.apply(find_max, axis=1)\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)\n",
        "\n",
        "res_1 = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test_seed')]) + ['average_map']]"
      ],
      "id": "5bde5568",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res1 = res_1.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "32a10ab9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: \n",
        "\n",
        "\n",
        ":::\n",
        ":::"
      ],
      "id": "c40a7630"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\P307791\\Anaconda3\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}