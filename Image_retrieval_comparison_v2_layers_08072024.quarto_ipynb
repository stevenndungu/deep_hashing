{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Image Retrieval\"\n",
        "date: today\n",
        "date-format: long\n",
        "author: \"Steven  Ndung'u et al.\"\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    toc-location: left\n",
        "    page-layout: full\n",
        "    theme:\n",
        "          light: flatly\n",
        "          dark: darkly\n",
        "    number-sections: false\n",
        "    highlighting: true\n",
        "    smooth-scroll: true\n",
        "    code-fold: true\n",
        "    highlighting-style: GitHub\n",
        "    self-contained: true\n",
        "execute:\n",
        "    echo: true\n",
        "    warning: false\n",
        "    enable: true\n",
        "\n",
        "title-block-banner: true\n",
        "\n",
        "---\n",
        "\n",
        "```{=html}\n",
        "<style type=\"text/css\">\n",
        "\n",
        "h1.title {\n",
        "  font-size: 20px;\n",
        "  color: White;\n",
        "  text-align: center;\n",
        "}\n",
        "h4.author { /* Header 4 - and the author and data headers use this too  */\n",
        "    font-size: 16px;\n",
        "  font-family: \"Source Sans Pro Semibold\", Times, serif;\n",
        "  color: Red;\n",
        "  text-align: center;\n",
        "}\n",
        "h4.date { /* Header 4 - and the author and data headers use this too  */\n",
        "  font-size: 16px;\n",
        "  font-family: \"Source Sans Pro Semibold\", Times, serif;\n",
        "  color: Red;\n",
        "  text-align: center;\n",
        "}\n",
        "</style>\n",
        "```\n",
        "\n",
        "\n",
        "------------------------------------------------------------------------\n",
        ":::{.column-page}\n",
        "\n",
        "::: {style=\"text-align:center\"}\n",
        "<h2>Model Evaluation COSFIRE Filters Approach</h2>\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "# Introduction\n",
        "\n",
        "\n",
        "We obtain the 26 statistically significant sets of hyperparameters from the classification paper along with their respective training, validation, and test descriptors. Based on these descriptors, we perform image hashing for each set of descriptors using a selected set of MLP hyperparameters (for the grid search). \n"
      ],
      "id": "75c2bd5d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "###################################################\n",
        "# Experiment 1\n",
        "###################################################\n",
        "#$Env:QUARTO_PYTHON = \"C:\\Users\\P307791\\Anaconda3\\python.exe\"\n",
        "import os\n",
        "os.environ['PYTHONHASHSEED'] = 'python'\n",
        "from scipy import stats\n",
        "\n",
        "from IPython.display import display, Markdown, HTML\n",
        "from itables import init_notebook_mode\n",
        "init_notebook_mode(all_interactive=True)\n",
        "from itables import show\n",
        "\n",
        "import torch.nn as nn\n",
        "\n",
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "import plotly.io as pio\n",
        "pio.renderers.default = \"notebook\"\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import re\n",
        "from scipy import stats\n",
        "\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def find_max(row):\n",
        "    return row.max()\n",
        "\n",
        "\n",
        "def colsum(x):\n",
        "    return sum(np.isnan(x))\n",
        "\n",
        "layer_vsn = 'v2_layers'\n",
        "# l1_reg_values = [0,0.0001, 0.00001, 1e-8]\n",
        "# l2_reg_values = [0,0.0001, 0.00001, 1e-8]\n",
        "\n",
        "l1_reg_values = [0,1e-8]\n",
        "l2_reg_values = [0,1e-8]\n",
        "\n",
        "query = (\n",
        "    \"output_size == @output_size and \"\n",
        "    \"l1_reg in @l1_reg_values and \"\n",
        "    \"l2_reg in @l2_reg_values\"\n",
        ")\n"
      ],
      "id": "a8cfda7b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The outputs below represent an example of a single experiment based on an array of hyperparameters considered to determine the optimal configuration of the MLP hashing architecture (For bit size 32).\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "## Model structure\n",
        "\n",
        "![](hyperparameter_range.png)\n"
      ],
      "id": "e3998155"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "#| code-fold: true\n",
        "\n",
        "class CosfireNet(nn.Module):\n",
        "    def __init__(self, input_size, bitsize, l1_reg, l2_reg):\n",
        "        super(CosfireNet, self).__init__()\n",
        "        self.l1_reg = l1_reg\n",
        "        self.l2_reg = l2_reg\n",
        "        self.hd = nn.Sequential(\n",
        "            nn.Linear(input_size, 300),\n",
        "            nn.BatchNorm1d(300),\n",
        "            nn.Tanh(),\n",
        "            nn.Linear(300, 200),\n",
        "            nn.BatchNorm1d(200),\n",
        "            nn.Tanh(),\n",
        "            nn.Linear(200, bitsize),\n",
        "            nn.Tanh()\n",
        "        )\n",
        "    def forward(self, x):\n",
        "        regularization_loss = 0.0\n",
        "        for param in self.hd.parameters():\n",
        "            regularization_loss += torch.sum(torch.abs(param)) * self.l1_reg  # L1 regularization\n",
        "            regularization_loss += torch.sum(param ** 2) * self.l2_reg  # L2 regularization\n",
        "        return self.hd(x), regularization_loss"
      ],
      "id": "3cb50d44",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Density plots\n",
        "\n",
        "![](density_plot_24062024.png)\n",
        "\n",
        "## mAP Curves\n",
        "\n",
        "![](Maps_curves_abs_values_24062024.png)\n",
        "\n",
        "## T-SNE_projection plots\n",
        "\n",
        "![](T-SNE_projection_24062024.png)\n",
        "\n",
        "## Loss curves\n",
        "::: {.column-screen layout-ncol=2}\n",
        "\n",
        "![Without regularization](Train_valid_curves.png)\n",
        "\n",
        "![With regularization](Train_valid_curves_random.png)\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "tiply, each row represents a unique combination of MLP hyperparameters, and every column represents the results yielded by each of the 26 statistically significant sets of descriptors. \n",
        "\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "\n",
        "In these experiments, we have considered four different bit sizes.\n",
        "\n",
        "\n",
        "##  Bit size 32\n",
        "\n",
        "\n",
        "The results in this presentation are from two experimental designs:\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "###  Experiment 1 Results\n",
        "\n",
        "The thresholding is based on fixed values between -1 and 1 on a step size of 0.1.\n",
        "\n",
        "\n",
        "\n",
        "::: {.panel-tabset}\n"
      ],
      "id": "b8201439"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"descriptors_tain_valid_test/v2_layers/merged_validation_runs_wide_format_abs_13062024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"descriptors_tain_valid_test/v2_layers/merged_test_runs_wide_format_abs_13062024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 32\n",
        "\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "40c98d3f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "2cebc180"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "2a6e4480",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "47f2532e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "67b8a53b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "c43f9191"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "95c23893",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(1)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 100px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "53e433e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (T-test)\n",
        "\n",
        "\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "c2d99a0b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues = []\n",
        "pvalues_real = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "  _, p_value = stats.ttest_ind(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')\n",
        "  pvalues_real.append(p_value)\n",
        "  pvalues.append((p_value >= 0.05)*1)\n",
        "\n",
        "  \n",
        "\n",
        "dt_valid_sub['pvalues'] = pvalues_real\n",
        "dt_valid_sub['sig'] = pvalues\n",
        "\n",
        "\n",
        "dt_valid_sub1 = dt_valid_sub.query('sig == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "a0410001",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dt = dt_valid.loc[dt_valid_sub1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_valid_sub1.shape)"
      ],
      "id": "0cd2c18a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params1 = dt_valid.loc[dt_valid_sub1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params = optimal_params1.reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "df52ef20",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "86c8db91"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_1 = test_data_1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_1.shape)"
      ],
      "id": "2b0c75a1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Difference\n"
      ],
      "id": "4ca2c50c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "diff = dt[['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "for i, cols in enumerate(zip(dt.columns,test_data_1.columns)):   \n",
        "   diff[f'col_diff_{i}'] = (np.array(dt[cols[0]]) - np.array(test_data_1[cols[1]]))*-1\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff['negative_count'] = diff.apply(count_negatives, axis=1)\n",
        "diff.sort_values(by =[\"negative_count\"],inplace = True, ascending=False)\n",
        "\n",
        "html_table = diff.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "# \n",
        "# show(diff)"
      ],
      "id": "d16a3164",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data\n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "f4e1ce1b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "a8b20c32",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data\n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "87e4adef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "92a60cd4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])+ ['average_map']]\n",
        "\n",
        "res_test1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "ca44ae39",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "7f2ba7ba"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "8693f6f3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "17b520f6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "31e5d0f2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "9f4b02cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "618b0b2f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Difference\n"
      ],
      "id": "f027261f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "diff_mw = dt_mw[['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "for i, cols in enumerate(zip(dt_mw.columns,test_data_mw1.columns)):   \n",
        "   diff_mw[f'col_diff_{i}'] = (np.array(dt_mw[cols[0]]) - np.array(test_data_mw1[cols[1]]))*-1\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff_mw['negative_count'] = diff_mw.apply(count_negatives, axis=1)\n",
        "\n",
        "diff_mw.sort_values(by =[\"negative_count\"],inplace = True, ascending=False)\n",
        "\n",
        "\n",
        "html_table = diff_mw.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "key_values = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']\n",
        "print('Are the keys of the valid and test dfs same?: ',dt_mw[key_values].equals(test_data_mw1[key_values]))"
      ],
      "id": "bddd0543",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff_mw['negative_count'] = diff_mw.apply(count_negatives, axis=1)\n",
        "# show(diff)"
      ],
      "id": "356cdab1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "76b09d45"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid2 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid2.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "caaeb7bd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "17804e1f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index].iloc[:, :6].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "dee0d0bc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test2 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test2.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "93b0ee1f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "Summary using radar plot\n"
      ],
      "id": "0447efa0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| \n",
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "res_valid1['id'] = res_valid1.index.to_series().apply(extract_number)\n",
        "res_test1['id'] = res_test1.index.to_series().apply(extract_number)\n",
        "\n",
        "\n",
        "\n",
        "res_comb = pd.concat([res_valid1,res_test1])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test1 = res_test1.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "data_range1 = np.array(list(res_test1['mean']) + list(res_valid1['mean']))\n",
        "categories = [str(i) for i in range(1,26)]\n",
        "fig = go.Figure()\n",
        "\n",
        "# Valid\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "       r=list(res_test1['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Test'\n",
        "))\n",
        "\n",
        "# Test\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "      r=list(res_valid1['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Valid'\n",
        "))\n",
        "\n",
        "# Customization of chart\n",
        "fig.update_layout(\n",
        "  title={\n",
        "      'text': \"T-Test\",\n",
        "        'xanchor': 'center',\n",
        "      'yanchor': 'top'\n",
        "  },\n",
        "  polar=dict(\n",
        "    radialaxis=dict(\n",
        "      visible=True,\n",
        "      range=[round(data_range1.min()), round(data_range1.max()) + 1]\n",
        "    )),\n",
        "  showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()\n",
        "\n",
        "##############\n",
        "\n",
        "\n",
        "res_valid2['id'] = res_valid2.index.to_series().apply(extract_number)\n",
        "res_test2['id'] = res_test2.index.to_series().apply(extract_number)\n",
        "\n",
        "\n",
        "\n",
        "res_comb = pd.concat([res_valid2,res_test2])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test2 = res_test2.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "data_range2 = np.array(list(res_test2['mean']) + list(res_valid2['mean']))\n",
        "\n",
        "categories = [str(i) for i in range(1,26)]\n",
        "fig = go.Figure()\n",
        "\n",
        "# Valid\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "       r=list(res_test2['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Test'\n",
        "))\n",
        "\n",
        "# Test\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "      r=list(res_valid2['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Valid'\n",
        "))\n",
        "\n",
        "# Customization of chart\n",
        "fig.update_layout(\n",
        "  title={\n",
        "      'text': \"MU-Test\",\n",
        "         'xanchor': 'center',\n",
        "      'yanchor': 'top'\n",
        "  },\n",
        "  polar=dict(\n",
        "    radialaxis=dict(\n",
        "      visible=True,\n",
        "      range=[round(data_range2.min()), round(data_range2.max()) + 1]\n",
        "    )),\n",
        "  showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "74dc1cf7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "</br>\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "##  Bit size 48\n",
        "\n",
        "\n",
        "The results in this presentation are from two experimental designs:\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "###  Experiment 1 Results\n",
        "\n",
        "The thresholding is based on fixed values between -1 and 1 on a step size of 0.1.\n",
        "\n",
        "\n",
        "\n",
        "::: {.panel-tabset}\n"
      ],
      "id": "1b6b5cc7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"descriptors_tain_valid_test/v2_layers/merged_validation_runs_wide_format_abs_13062024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"descriptors_tain_valid_test/v2_layers/merged_test_runs_wide_format_abs_13062024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 48\n",
        "\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "9a8fd9e4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "9ac98b71"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "7dcbba82",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "71bead3f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "47d9e32e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "42ab02c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "932e1004",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(1)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 100px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "217ab5cb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (T-test)\n",
        "\n",
        "\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "aefe3776"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues = []\n",
        "pvalues_real = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "  _, p_value = stats.ttest_ind(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')\n",
        "  pvalues_real.append(p_value)\n",
        "  pvalues.append((p_value >= 0.05)*1)\n",
        "\n",
        "  \n",
        "\n",
        "dt_valid_sub['pvalues'] = pvalues_real\n",
        "dt_valid_sub['sig'] = pvalues\n",
        "\n",
        "\n",
        "dt_valid_sub1 = dt_valid_sub.query('sig == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "e494bcd2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dt = dt_valid.loc[dt_valid_sub1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_valid_sub1.shape)"
      ],
      "id": "f1fb9ea0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params1 = dt_valid.loc[dt_valid_sub1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params = optimal_params1.reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "4c3a964b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "66b9f8dd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_1 = test_data_1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_1.shape)"
      ],
      "id": "ccad5286",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Difference\n"
      ],
      "id": "b01dae46"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "diff = dt[['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "for i, cols in enumerate(zip(dt.columns,test_data_1.columns)):   \n",
        "   diff[f'col_diff_{i}'] = (np.array(dt[cols[0]]) - np.array(test_data_1[cols[1]]))*-1\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff['negative_count'] = diff.apply(count_negatives, axis=1)\n",
        "diff.sort_values(by =[\"negative_count\"],inplace = True, ascending=False)\n",
        "\n",
        "html_table = diff.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "# \n",
        "# show(diff)"
      ],
      "id": "e9d63de0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data\n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "9bc41f8a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "dd6a0b61",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data\n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "092ec92c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "405d9961",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])+ ['average_map']]\n",
        "\n",
        "res_test1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "ebb673d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "6f6212ec"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "718487e3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "709a4b70",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "2e845bfe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "fd072f42"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "dd18dc7a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Difference\n"
      ],
      "id": "252438c6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "diff_mw = dt_mw[['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "for i, cols in enumerate(zip(dt_mw.columns,test_data_mw1.columns)):   \n",
        "   diff_mw[f'col_diff_{i}'] = (np.array(dt_mw[cols[0]]) - np.array(test_data_mw1[cols[1]]))*-1\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff_mw['negative_count'] = diff_mw.apply(count_negatives, axis=1)\n",
        "\n",
        "diff_mw.sort_values(by =[\"negative_count\"],inplace = True, ascending=False)\n",
        "\n",
        "\n",
        "html_table = diff_mw.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "key_values = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']\n",
        "print('Are the keys of the valid and test dfs same?: ',dt_mw[key_values].equals(test_data_mw1[key_values]))"
      ],
      "id": "97204fce",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff_mw['negative_count'] = diff_mw.apply(count_negatives, axis=1)\n",
        "# show(diff)"
      ],
      "id": "057f4e31",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "9877d2f5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid2 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid2.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "1defbb12",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "ad640c54"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index].iloc[:, :6].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "bf493c02",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test2 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test2.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "20b43949",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "Summary using radar plot\n"
      ],
      "id": "1493c0f3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| \n",
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "res_valid1['id'] = res_valid1.index.to_series().apply(extract_number)\n",
        "res_test1['id'] = res_test1.index.to_series().apply(extract_number)\n",
        "\n",
        "\n",
        "\n",
        "res_comb = pd.concat([res_valid1,res_test1])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test1 = res_test1.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "data_range1 = np.array(list(res_test1['mean']) + list(res_valid1['mean']))\n",
        "categories = [str(i) for i in range(1,26)]\n",
        "fig = go.Figure()\n",
        "\n",
        "# Valid\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "       r=list(res_test1['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Test'\n",
        "))\n",
        "\n",
        "# Test\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "      r=list(res_valid1['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Valid'\n",
        "))\n",
        "\n",
        "# Customization of chart\n",
        "fig.update_layout(\n",
        "  title={\n",
        "      'text': \"T-Test\",\n",
        "        'xanchor': 'center',\n",
        "      'yanchor': 'top'\n",
        "  },\n",
        "  polar=dict(\n",
        "    radialaxis=dict(\n",
        "      visible=True,\n",
        "      range=[round(data_range1.min()), round(data_range1.max()) + 1]\n",
        "    )),\n",
        "  showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()\n",
        "\n",
        "##############\n",
        "\n",
        "\n",
        "res_valid2['id'] = res_valid2.index.to_series().apply(extract_number)\n",
        "res_test2['id'] = res_test2.index.to_series().apply(extract_number)\n",
        "\n",
        "\n",
        "\n",
        "res_comb = pd.concat([res_valid2,res_test2])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test2 = res_test2.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "data_range2 = np.array(list(res_test2['mean']) + list(res_valid2['mean']))\n",
        "\n",
        "categories = [str(i) for i in range(1,26)]\n",
        "fig = go.Figure()\n",
        "\n",
        "# Valid\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "       r=list(res_test2['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Test'\n",
        "))\n",
        "\n",
        "# Test\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "      r=list(res_valid2['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Valid'\n",
        "))\n",
        "\n",
        "# Customization of chart\n",
        "fig.update_layout(\n",
        "  title={\n",
        "      'text': \"MU-Test\",\n",
        "         'xanchor': 'center',\n",
        "      'yanchor': 'top'\n",
        "  },\n",
        "  polar=dict(\n",
        "    radialaxis=dict(\n",
        "      visible=True,\n",
        "      range=[round(data_range2.min()), round(data_range2.max()) + 1]\n",
        "    )),\n",
        "  showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "a5aa2bb1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "</br>\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "\n",
        "##  Bit size 16 \n",
        "\n",
        "\n",
        "The results in this presentation are from two experimental designs:\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "###  Experiment 1 Results\n",
        "\n",
        "The thresholding is based on fixed values between -1 and 1 on a step size of 0.1.\n",
        "\n",
        "\n",
        "\n",
        "::: {.panel-tabset}\n"
      ],
      "id": "5b3c515f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"descriptors_tain_valid_test/v2_layers/merged_validation_runs_wide_format_abs_13062024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"descriptors_tain_valid_test/v2_layers/merged_test_runs_wide_format_abs_13062024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 16\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "f1ce3ecb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "7035f94e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "3f9ccf20",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "c65b852c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "12d04c94",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "09900e3c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "3b05a75d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(1)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 100px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "bf034bad",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (T-test)\n",
        "\n",
        "\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "44471957"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues = []\n",
        "pvalues_real = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "  _, p_value = stats.ttest_ind(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')\n",
        "  pvalues_real.append(p_value)\n",
        "  pvalues.append((p_value >= 0.05)*1)\n",
        "\n",
        "  \n",
        "\n",
        "dt_valid_sub['pvalues'] = pvalues_real\n",
        "dt_valid_sub['sig'] = pvalues\n",
        "\n",
        "\n",
        "dt_valid_sub1 = dt_valid_sub.query('sig == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "76121e59",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dt = dt_valid.loc[dt_valid_sub1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_valid_sub1.shape)"
      ],
      "id": "27768364",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params1 = dt_valid.loc[dt_valid_sub1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params = optimal_params1.reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "b94fc5e7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "30591620"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_1 = test_data_1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_1.shape)"
      ],
      "id": "6d9dea4e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Difference\n"
      ],
      "id": "fd487175"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "diff = dt[['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "for i, cols in enumerate(zip(dt.columns,test_data_1.columns)):   \n",
        "   diff[f'col_diff_{i}'] = (np.array(dt[cols[0]]) - np.array(test_data_1[cols[1]]))*-1\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff['negative_count'] = diff.apply(count_negatives, axis=1)\n",
        "diff.sort_values(by =[\"negative_count\"],inplace = True, ascending=False)\n",
        "\n",
        "html_table = diff.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "# \n",
        "# show(diff)"
      ],
      "id": "fa838f54",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data\n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "91367fbd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "d4dd7cfe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data\n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "838165f6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "e189c0b8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])+ ['average_map']]\n",
        "\n",
        "res_test1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "16a894e3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "ba28f1c4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "3a641c75",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "fdc1514c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "58b92406",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "5db41f93"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "3aae8d79",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Difference\n"
      ],
      "id": "b647f868"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "diff_mw = dt_mw[['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "for i, cols in enumerate(zip(dt_mw.columns,test_data_mw1.columns)):   \n",
        "   diff_mw[f'col_diff_{i}'] = (np.array(dt_mw[cols[0]]) - np.array(test_data_mw1[cols[1]]))*-1\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff_mw['negative_count'] = diff_mw.apply(count_negatives, axis=1)\n",
        "\n",
        "diff_mw.sort_values(by =[\"negative_count\"],inplace = True, ascending=False)\n",
        "\n",
        "\n",
        "html_table = diff_mw.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "key_values = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']\n",
        "print('Are the keys of the valid and test dfs same?: ',dt_mw[key_values].equals(test_data_mw1[key_values]))"
      ],
      "id": "d47e9f0b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff_mw['negative_count'] = diff_mw.apply(count_negatives, axis=1)\n",
        "# show(diff)"
      ],
      "id": "b14cd071",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "4f83de58"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid2 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid2.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "14fdcb2b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "0a431432"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index].iloc[:, :6].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "808986eb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test2 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test2.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "033c169c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "Summary using radar plot\n"
      ],
      "id": "4dd681fc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| \n",
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "res_valid1['id'] = res_valid1.index.to_series().apply(extract_number)\n",
        "res_test1['id'] = res_test1.index.to_series().apply(extract_number)\n",
        "\n",
        "\n",
        "\n",
        "res_comb = pd.concat([res_valid1,res_test1])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test1 = res_test1.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "data_range1 = np.array(list(res_test1['mean']) + list(res_valid1['mean']))\n",
        "categories = [str(i) for i in range(1,26)]\n",
        "fig = go.Figure()\n",
        "\n",
        "# Valid\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "       r=list(res_test1['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Test'\n",
        "))\n",
        "\n",
        "# Test\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "      r=list(res_valid1['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Valid'\n",
        "))\n",
        "\n",
        "# Customization of chart\n",
        "fig.update_layout(\n",
        "  title={\n",
        "      'text': \"T-Test\",\n",
        "        'xanchor': 'center',\n",
        "      'yanchor': 'top'\n",
        "  },\n",
        "  polar=dict(\n",
        "    radialaxis=dict(\n",
        "      visible=True,\n",
        "      range=[round(data_range1.min()), round(data_range1.max()) + 1]\n",
        "    )),\n",
        "  showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()\n",
        "\n",
        "##############\n",
        "\n",
        "\n",
        "res_valid2['id'] = res_valid2.index.to_series().apply(extract_number)\n",
        "res_test2['id'] = res_test2.index.to_series().apply(extract_number)\n",
        "\n",
        "\n",
        "\n",
        "res_comb = pd.concat([res_valid2,res_test2])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test2 = res_test2.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "data_range2 = np.array(list(res_test2['mean']) + list(res_valid2['mean']))\n",
        "\n",
        "categories = [str(i) for i in range(1,26)]\n",
        "fig = go.Figure()\n",
        "\n",
        "# Valid\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "       r=list(res_test2['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Test'\n",
        "))\n",
        "\n",
        "# Test\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "      r=list(res_valid2['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Valid'\n",
        "))\n",
        "\n",
        "# Customization of chart\n",
        "fig.update_layout(\n",
        "  title={\n",
        "      'text': \"MU-Test\",\n",
        "         'xanchor': 'center',\n",
        "      'yanchor': 'top'\n",
        "  },\n",
        "  polar=dict(\n",
        "    radialaxis=dict(\n",
        "      visible=True,\n",
        "      range=[round(data_range2.min()), round(data_range2.max()) + 1]\n",
        "    )),\n",
        "  showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "d2a70fac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "</br>\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "\n",
        "##  Bit size 8 \n",
        "\n",
        "\n",
        "The results in this presentation are from two experimental designs:\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "###  Experiment 1 Results\n",
        "\n",
        "The thresholding is based on fixed values between -1 and 1 on a step size of 0.1.\n",
        "\n",
        "\n",
        "\n",
        "::: {.panel-tabset}\n"
      ],
      "id": "d8baa16d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#%%\n",
        "\n",
        "dt_valid  = pd.read_csv(f\"descriptors_tain_valid_test/v2_layers/merged_validation_runs_wide_format_abs_13062024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "dt_test  = pd.read_csv(f\"descriptors_tain_valid_test/v2_layers/merged_test_runs_wide_format_abs_13062024_{layer_vsn}.csv\")\n",
        "\n",
        "\n",
        "\n",
        "output_size = 8\n",
        "\n",
        "\n",
        "dt_valid = dt_valid.query(query)\n",
        "\n",
        "dt_test = dt_test.query(query)"
      ],
      "id": "894fb5e4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Validation Data mAP Results Preview:\n"
      ],
      "id": "e1087824"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_valid.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "ed79ce36",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "#### Test Data mAP Results Preview:\n"
      ],
      "id": "3e0f92cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "#| \n",
        "html_table = dt_test.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "6ee8671c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "</br>\n",
        "\n",
        "The global mean maximum row:\n"
      ],
      "id": "e414954f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "################\n",
        "dt_valid_sub = dt_valid[list(dt_valid.columns[dt_valid.columns.str.startswith('mAP_valid')])]\n",
        "\n",
        "# Apply the function row-wise\n",
        "dt_valid_sub['average_map'] = dt_valid_sub.apply(np.mean, axis=1)\n",
        "dt_valid_sub.sort_values(by='average_map', ascending=False, inplace=True)\n",
        "\n",
        "#maximum mean value\n",
        "dt_valid_sub['average_map'].max()\n",
        "\n",
        "\n",
        "\n",
        "#########\n",
        "\n",
        "\n",
        "# extract max value row.\n",
        "\n",
        "max_index = dt_valid_sub['average_map'].idxmax()\n",
        "max_row = dt_valid_sub.loc[max_index]\n",
        "#print(max_row)\n",
        "dt_valid_sub_mw = dt_valid_sub.copy()"
      ],
      "id": "bfc6826c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dd = dt_valid_sub.head(1)\n",
        "\n",
        "html_table = dd.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 100px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "f2b3e20c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Model performance on validation data (T-test)\n",
        "\n",
        "\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "8236fb57"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues = []\n",
        "pvalues_real = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "  _, p_value = stats.ttest_ind(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')\n",
        "  pvalues_real.append(p_value)\n",
        "  pvalues.append((p_value >= 0.05)*1)\n",
        "\n",
        "  \n",
        "\n",
        "dt_valid_sub['pvalues'] = pvalues_real\n",
        "dt_valid_sub['sig'] = pvalues\n",
        "\n",
        "\n",
        "dt_valid_sub1 = dt_valid_sub.query('sig == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "0c9d4899",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "dt = dt_valid.loc[dt_valid_sub1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_valid_sub1.shape)"
      ],
      "id": "719b2c01",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params1 = dt_valid.loc[dt_valid_sub1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params = optimal_params1.reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "2373a394",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "adf29925"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_1 = test_data_1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_1.shape)"
      ],
      "id": "09067f76",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Difference\n"
      ],
      "id": "19ca3006"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "diff = dt[['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "for i, cols in enumerate(zip(dt.columns,test_data_1.columns)):   \n",
        "   diff[f'col_diff_{i}'] = (np.array(dt[cols[0]]) - np.array(test_data_1[cols[1]]))*-1\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff['negative_count'] = diff.apply(count_negatives, axis=1)\n",
        "diff.sort_values(by =[\"negative_count\"],inplace = True, ascending=False)\n",
        "\n",
        "html_table = diff.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "# \n",
        "# show(diff)"
      ],
      "id": "c94a3a1f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data\n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "b51b1396"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "dba97bb2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data\n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "815feb4c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "ad682a2f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])+ ['average_map']]\n",
        "\n",
        "res_test1 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "ff21c6ba",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### Model performance on validation data (Mann-Whitney U Test)\n",
        "\n",
        "##### Statistical Significance:\n",
        "\n",
        "\n",
        "Using the global mean maximum row as the reference, we perform the right-tailed t-test to identify significant hyperparameters.\n"
      ],
      "id": "f69d835b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pvalues_mw = []\n",
        "pvalues_real_mw = []\n",
        "\n",
        "for _,index in enumerate(dt_valid_sub.index):\n",
        "\n",
        "  _, p_value_mw = stats.mannwhitneyu(max_row[:-1], dt_valid_sub.loc[index][:-1], alternative='greater')#, method = 'asymptotic')\n",
        "  pvalues_real_mw.append(p_value_mw)\n",
        "  pvalues_mw.append((p_value_mw >= 0.05)*1)\n",
        "  \n",
        "\n",
        "dt_valid_sub_mw['pvalues_mw'] = pvalues_real_mw\n",
        "dt_valid_sub_mw['sig_mw'] = pvalues_mw\n",
        "\n",
        "dt_valid_sub_mw1 = dt_valid_sub_mw.query('sig_mw == 1')\n",
        "\n",
        "\n",
        "max_indexx = dt_valid_sub_mw1.iloc[:, :-3].mean().idxmax()\n",
        "\n",
        "#print(sum(pvalues),max_indexx)"
      ],
      "id": "75c16d74",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "dt_mw = dt_valid.loc[dt_valid_sub_mw1.index].sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = dt_mw.to_html(index=True)\n",
        "\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "print('Size of the All data: ',dt_valid_sub_mw.shape)\n",
        "\n",
        "print('Size of the Sig data: ',dt_mw.shape)"
      ],
      "id": "1eaa7fec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params_mw1 = dt_valid.loc[dt_valid_sub_mw1.index][['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "optimal_params_mw = optimal_params_mw1.reset_index()\n",
        "optimal_params_mw.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_mw1 = pd.merge(optimal_params_mw, dt_test, on=['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "test_data_1_sub_mw = test_data_mw1[list(test_data_mw1.columns[test_data_mw1.columns.str.startswith('mAP_test')])]"
      ],
      "id": "953d2496",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Equivalent test data\n"
      ],
      "id": "dd9354b3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "test_data_mw1 = test_data_mw1.sort_values(by = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg'])\n",
        "html_table = test_data_mw1.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "print('Size of the test data: ',test_data_mw1.shape)"
      ],
      "id": "af40dd58",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Difference\n"
      ],
      "id": "10a9cf5b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "diff_mw = dt_mw[['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']]\n",
        "for i, cols in enumerate(zip(dt_mw.columns,test_data_mw1.columns)):   \n",
        "   diff_mw[f'col_diff_{i}'] = (np.array(dt_mw[cols[0]]) - np.array(test_data_mw1[cols[1]]))*-1\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff_mw['negative_count'] = diff_mw.apply(count_negatives, axis=1)\n",
        "\n",
        "diff_mw.sort_values(by =[\"negative_count\"],inplace = True, ascending=False)\n",
        "\n",
        "\n",
        "html_table = diff_mw.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n",
        "\n",
        "key_values = ['input_size', 'output_size', 'learning_rate', 'batch_size', 'alpha', 'margin', 'l1_reg', 'l2_reg']\n",
        "print('Are the keys of the valid and test dfs same?: ',dt_mw[key_values].equals(test_data_mw1[key_values]))"
      ],
      "id": "4bad706c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "# Function to count negatives in a row\n",
        "def count_negatives(row):\n",
        "    return sum(1 for value in row if isinstance(value, (int, float)) and value < 0)\n",
        "\n",
        "diff_mw['negative_count'] = diff_mw.apply(count_negatives, axis=1)\n",
        "# show(diff)"
      ],
      "id": "5326149b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.panel-tabset}\n",
        "\n",
        "##### Model performance on valid data \n",
        "\n",
        "Average & Std Deviation of the Significant rows:\n"
      ],
      "id": "d8c5dfcc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = dt_valid_sub_mw1.iloc[:,:-3].describe().iloc[1:3]\n",
        "\n",
        "res_valid2 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_valid2.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))\n"
      ],
      "id": "b77c2e7a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Model performance on Test data \n",
        "</br>\n",
        "We then apply the hyperparameters to the test set and average the results.\n"
      ],
      "id": "20027b09"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "####################################################\n",
        "# Use the hyperparameters to the test data.\n",
        "####################################################\n",
        "optimal_params = dt_valid.loc[dt_valid_sub_mw1.index].iloc[:, :6].reset_index()\n",
        "optimal_params.drop(['index'], axis=1, inplace = True)\n",
        "\n",
        "#rotation invariance test data with optimal parameters\n",
        "test_data_1 = pd.merge(optimal_params, dt_test, how='left')\n",
        "test_data_1_sub = test_data_1[list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')])]\n",
        "test_data_1['average_map'] = test_data_1_sub.apply(np.mean, axis=1)\n",
        "\n",
        "test_data_1.sort_values(by=['average_map'], ascending= False,inplace=True)"
      ],
      "id": "ad68a1a3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: false\n",
        "res = test_data_1.describe().iloc[1:3][list(test_data_1.columns[test_data_1.columns.str.startswith('mAP_test')]) + ['average_map']]\n",
        "\n",
        "res_test2 = res.T.sort_values(by=['mean'], ascending= False)\n",
        "\n",
        "html_table = res_test2.to_html(index=True)\n",
        "\n",
        "# Wrap in a scrollable div\n",
        "scrollable_table = f\"\"\"\n",
        "<div style=\"height: 400px; width: 100%; overflow-x: auto; overflow-y: auto;\">\n",
        "    {html_table}\n",
        "</div>\n",
        "\"\"\"\n",
        "# Display the scrollable table\n",
        "display(HTML(scrollable_table))"
      ],
      "id": "34a21f8c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "Summary using radar plot\n"
      ],
      "id": "e18af7e5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| \n",
        "def extract_number(text):\n",
        "    if isinstance(text, str):\n",
        "        matches = re.findall(r'\\d+', text)\n",
        "        return int(matches[0]) if matches else 1\n",
        "    return 1\n",
        "\n",
        "res_valid1['id'] = res_valid1.index.to_series().apply(extract_number)\n",
        "res_test1['id'] = res_test1.index.to_series().apply(extract_number)\n",
        "\n",
        "\n",
        "\n",
        "res_comb = pd.concat([res_valid1,res_test1])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test1 = res_test1.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "data_range1 = np.array(list(res_test1['mean']) + list(res_valid1['mean']))\n",
        "categories = [str(i) for i in range(1,26)]\n",
        "fig = go.Figure()\n",
        "\n",
        "# Valid\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "       r=list(res_test1['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Test'\n",
        "))\n",
        "\n",
        "# Test\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "      r=list(res_valid1['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Valid'\n",
        "))\n",
        "\n",
        "# Customization of chart\n",
        "fig.update_layout(\n",
        "  title={\n",
        "      'text': \"T-Test\",\n",
        "        'xanchor': 'center',\n",
        "      'yanchor': 'top'\n",
        "  },\n",
        "  polar=dict(\n",
        "    radialaxis=dict(\n",
        "      visible=True,\n",
        "      range=[round(data_range1.min()), round(data_range1.max()) + 1 + 1]\n",
        "    )),\n",
        "  showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()\n",
        "\n",
        "##############\n",
        "\n",
        "\n",
        "res_valid2['id'] = res_valid2.index.to_series().apply(extract_number)\n",
        "res_test2['id'] = res_test2.index.to_series().apply(extract_number)\n",
        "\n",
        "\n",
        "\n",
        "res_comb = pd.concat([res_valid2,res_test2])\n",
        "index_series = res_comb.index.to_series()\n",
        "\n",
        "res_comb['type'] = np.where(\n",
        "    index_series.str.contains('valid', case=False), 'valid',\n",
        "    np.where(index_series.str.contains('test', case=False), 'test', 'unknown')\n",
        ")\n",
        "res_comb = res_comb.query(\"type !='unknown'\")\n",
        "\n",
        "res_comb =  res_comb.reset_index(drop=True)\n",
        "\n",
        "\n",
        "res_test2 = res_test2.sort_values(by=['id']).reset_index().query(\"index !='average_map'\")\n",
        "\n",
        "data_range2 = np.array(list(res_test2['mean']) + list(res_valid2['mean']))\n",
        "\n",
        "categories = [str(i) for i in range(1,26)]\n",
        "fig = go.Figure()\n",
        "\n",
        "# Valid\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "       r=list(res_test2['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Test'\n",
        "))\n",
        "\n",
        "# Test\n",
        "fig.add_trace(go.Scatterpolar(\n",
        "      r=list(res_valid2['mean']),\n",
        "      theta=categories,\n",
        "      #fill='toself',\n",
        "      name='Valid'\n",
        "))\n",
        "\n",
        "# Customization of chart\n",
        "fig.update_layout(\n",
        "  title={\n",
        "      'text': \"MU-Test\",\n",
        "         'xanchor': 'center',\n",
        "      'yanchor': 'top'\n",
        "  },\n",
        "  polar=dict(\n",
        "    radialaxis=dict(\n",
        "      visible=True,\n",
        "      range=[round(data_range2.min()), round(data_range2.max()) + 1]\n",
        "    )),\n",
        "  showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "ad9f0a79",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "</br>\n",
        "\n",
        "</br>\n",
        "\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "Comparisons of bit size results\n"
      ],
      "id": "88bc5c66"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| column: screen\n",
        "#| echo: false\n",
        "#| code-fold: false\n",
        "\n",
        "# data = {'bit_size':[8,16,32,48],\n",
        "#         'Valid': [best_valid_bit_size_8,best_valid_bit_size_16,best_valid_bit_size_32,best_valid_bit_size_48],\n",
        "#         'Test': [best_test_bit_size_8, best_test_bit_size_16, best_test_bit_size_32,best_test_bit_size_48]\n",
        "#         }\n",
        "# final_results = pd.DataFrame(data)\n",
        "\n",
        "\n",
        "# # Melt the dataframe to long format\n",
        "# df_melted = pd.melt(final_results, id_vars=['bit_size'], var_name='Metric', value_name='mAP')\n",
        "\n",
        "# # Create the bar plot\n",
        "# plt.figure(figsize=(12, 6))\n",
        "# sns.barplot(x='bit_size', y='mAP', hue='Metric', data=df_melted)\n",
        "\n",
        "# # Customize the plot\n",
        "# plt.title('T-Test')\n",
        "# plt.xlabel('Bit Size')\n",
        "# plt.ylabel('mAP')\n",
        "\n",
        "# # Add labels on top of each bar\n",
        "# for i in plt.gca().containers:\n",
        "#     plt.gca().bar_label(i, fmt='%.2f', label_type='edge')\n",
        "\n",
        "# # Adjust legend and layout\n",
        "# plt.legend(title='Metric', bbox_to_anchor=(1.05, 1))#, loc='upper left')\n",
        "# plt.tight_layout()\n",
        "\n",
        "# # Show the plot\n",
        "# plt.show()\n",
        "\n",
        "# data = {'bit_size':[8,16,32,48],\n",
        "#         'Valid': [best_valid_bit_size_8_mw, best_valid_bit_size_16_mw, best_valid_bit_size_32_mw, best_valid_bit_size_48_mw],\n",
        "#         'Test': [best_test_bit_size_8_mw, best_test_bit_size_16_mw, best_test_bit_size_32_mw, best_test_bit_size_48_mw]\n",
        "#         }\n",
        "# final_results_mw = pd.DataFrame(data)\n",
        "\n",
        "# # Melt the dataframe to long format\n",
        "# df_melted = pd.melt(final_results_mw, id_vars=['bit_size'], var_name='Metric', value_name='mAP')\n",
        "\n",
        "# # Create the bar plot\n",
        "# plt.figure(figsize=(12, 6))\n",
        "# sns.barplot(x='bit_size', y='mAP', hue='Metric', data=df_melted)\n",
        "\n",
        "# # Customize the plot\n",
        "# plt.title('MU-Test')\n",
        "# plt.xlabel('Bit Size')\n",
        "# plt.ylabel('mAP')\n",
        "\n",
        "# # Add labels on top of each bar\n",
        "# for i in plt.gca().containers:\n",
        "#     plt.gca().bar_label(i, fmt='%.2f', label_type='edge')\n",
        "\n",
        "# # Adjust legend and layout\n",
        "# plt.legend(title='Metric', bbox_to_anchor=(1.05, 1))\n",
        "# plt.tight_layout()\n",
        "\n",
        "# # Show the plot\n",
        "# plt.show()"
      ],
      "id": "0096c786",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.column-screen layout-ncol=2}\n",
        "\n",
        "![T-test curves](Compiled_results_Ttest.png)\n",
        "\n",
        "![MU-test curves](Compiled_results.png)\n",
        "\n",
        ":::\n"
      ],
      "id": "47958661"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\P307791\\Anaconda3\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}