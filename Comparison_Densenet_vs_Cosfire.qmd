---
title: "Image Retrieval"
date: today
date-format: long
author: "Steven  Ndung'u et al."
format:
  html:
    toc: false
    toc-depth: 3
    toc-location: left
    page-layout: full
    theme:
          light: flatly
          dark: darkly
    number-sections: false
    highlighting: true
    smooth-scroll: true
    code-fold: true
    highlighting-style: github
    self-contained: true
execute:
    echo: true
    warning: false
    enable: true

title-block-banner: true

---

```{=html}
<style type="text/css">

h1.title {
  font-size: 20px;
  color: White;
  text-align: center;
}
h4.author { /* Header 4 - and the author and data headers use this too  */
    font-size: 16px;
  font-family: "Source Sans Pro Semibold", Times, serif;
  color: Red;
  text-align: center;
}
h4.date { /* Header 4 - and the author and data headers use this too  */
  font-size: 16px;
  font-family: "Source Sans Pro Semibold", Times, serif;
  color: Red;
  text-align: center;
}
</style>
```

------------------------------------------------------------------------
:::{.column-screen-inset}
::: {style="text-align:center"}
<h2>Model Comaprison: Densenet161 vs COSFIRE Approach</h2>
:::

</br>

###  Model Performance


```{python}

import ast
import os
import glob
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from cosfire_workflow_utils import *
from sklearn.manifold import TSNE

##############################################################
dic_labels = {'Bent': 0,
                'Compact': 1, 
                'FRI': 2,
                'FRII': 3 
              }

dic_labels_rev = { 2:'Bent',
                3:'Compact',
                  0:'FRI',
                  1: 'FRII'
              }
 
```


::: {.panel-tabset}


#### COSFIRE Approach


::: {.panel-tabset}

###### Model Validation

Model performance based on validation data


```{python}

result_folder =  "I:/My Drive/deep_learning/deep_hashing/deep_hashing_github/model_OhbV"


    
df_training = pd.read_csv(result_folder +'/df_training.csv')
df_training['predictions'] = [ast.literal_eval(pred) for pred in df_training.predictions]

df_valid = pd.read_csv(result_folder +'/df_valid.csv')
df_valid['predictions'] = [ast.literal_eval(pred) for pred in df_valid.predictions]

df_testing = pd.read_csv(result_folder +'/df_testing.csv')
df_testing['predictions'] = [ast.literal_eval(pred) for pred in df_testing.predictions]

#Get optimal threshold from validation data 
thresholds = list(range(0,100,5))#[30, 50, 55, 65, 70, 85, 90]#)
#thresholds = np.linspace(50, 70, 50).tolist()

mAP_results = []
for _,thresh in enumerate(thresholds):

  maP,train_binary, train_label, valid_binary, valid_label = mAP_values(df_training,df_valid,thresh, percentile = True,topk=100)
  mAP_results.append(maP)



data = {'mAP': mAP_results,
        'threshold': thresholds}

df = pd.DataFrame(data)

# Find the index of the maximum mAP value
max_map_index = df['mAP'].idxmax()

# Retrieve the threshold corresponding to the maximum mAP
threshold_max_map = df.loc[max_map_index, 'threshold']

maP_valid,train_binary, train_label, valid_binary, valid_label = mAP_values(df_training,df_valid,thresh = threshold_max_map, percentile = True,topk=100)

maP_test,train_binary, train_label, test_binary, test_label = mAP_values(df_training,df_testing,thresh = threshold_max_map, percentile = True, topk=100)

# Plot the line curve
plt.plot(thresholds, mAP_results,  linestyle='-',color = 'red')
plt.xlabel('Threshold (Percentile)')
plt.ylabel('mAP')
plt.show()

print('The optimal threshold is: ', threshold_max_map)
print('The Best Validation mAP is: ',maP_valid)

print('At the optimal threshold: ', threshold_max_map)
print('The Test  mAP is: ',maP_test)
```


###### Model Predictions overview


```{python}

# Create a figure and subplots
fig, axes = plt.subplots(1, 2, figsize=(13, 5))

# Plot 1: KDE curves for each label_code
for label_code in range(4):
    dff = df_testing.query(f'label_code == {label_code}')
    out_array_test = []
    dd_test = np.array([out_array_test.extend(np.array(out)) for _, out in enumerate(dff.predictions)])
    out_array_test = np.array(out_array_test)
    sns.kdeplot(out_array_test, label=f'{dic_labels_rev[label_code]}', ax=axes[0])

# Customize plot 1
axes[0].set_xlim(-1, 1)
axes[0].set_xlabel('Value')
axes[0].set_ylabel('Density')
axes[0].legend(title='Galaxy Types')
axes[0].set_title('KDE Curves for Each Galaxy')


# Plot 2: KDE curve for all predictions
out_array_test = []
dd_test = np.array([out_array_test.extend(np.array(out)) for _, out in enumerate(df_testing.predictions)])
out_array_test = np.array(out_array_test)
sns.kdeplot(out_array_test, color='r', ax=axes[1])

# Customize plot 2
axes[1].set_xlim(-1, 1)
axes[1].set_xlabel('Value')
axes[1].set_ylabel('Density')
axes[1].set_title('KDE Curves for All Galaxies')

# Adjust the spacing between subplots
plt.tight_layout()

# Show the plot
plt.show()
```


###### T-SNE projections

```{python}

fig, axes = plt.subplots(1, 3, figsize=(17, 5))

# Plot 1: Training data
array_dat = []
for i in range(df_training['predictions'].shape[0]):
    array_dat.append(list(df_training['predictions'].iloc[i]))
array_dat = np.array(array_dat)
y = df_training.lable_name
tsne = TSNE(n_components=2, random_state=42)
z = tsne.fit_transform(array_dat)
df = pd.DataFrame()
df["y"] = y
df["comp-1"] = z[:,0]
df["comp-2"] = z[:,1]
sns.scatterplot(x="comp-1", y="comp-2", hue=df.y.tolist(), palette=sns.color_palette("hls", 4), data=df, ax=axes[0]).set(title="Train: T-SNE projection")

# Plot 2: Validation data
array_dat = []
for i in range(df_valid['predictions'].shape[0]):
    array_dat.append(list(df_valid['predictions'].iloc[i]))
array_dat = np.array(array_dat)
y = df_valid.lable_name
tsne = TSNE(n_components=2, random_state=42)
z = tsne.fit_transform(array_dat)
df = pd.DataFrame()
df["y"] = y
df["comp-1"] = z[:,0]
df["comp-2"] = z[:,1]
sns.scatterplot(x="comp-1", y="comp-2", hue=df.y.tolist(), palette=sns.color_palette("hls", 4), data=df, ax=axes[1]).set(title="Valid: T-SNE projection")

# Plot 3: Testing data
array_dat = []
for i in range(df_testing['predictions'].shape[0]):
    array_dat.append(list(df_testing['predictions'].iloc[i]))
array_dat = np.array(array_dat)
y = df_testing.lable_name
tsne = TSNE(n_components=2, random_state=42)
z = tsne.fit_transform(array_dat)
df = pd.DataFrame()
df["y"] = y
df["comp-1"] = z[:,0]
df["comp-2"] = z[:,1]
sns.scatterplot(x="comp-1", y="comp-2", hue=df.y.tolist(), palette=sns.color_palette("hls", 4), data=df, ax=axes[2]).set(title="Test: T-SNE projection")

plt.tight_layout()
plt.show()

```


:::



:::

#### DenseNet Approach


::: {.panel-tabset}

###### Model Validation

Model performance based on validation data


```{python}

result_folder =  "I:/My Drive/deep_learning/deep_hashing/deep_hashing_github/data_Fri_May__3_16_15_49_2024"


    
df_training = pd.read_csv(result_folder +'/df_training.csv')
df_training['predictions'] = [ast.literal_eval(pred) for pred in df_training.predictions]

df_valid = pd.read_csv(result_folder +'/df_valid.csv')
df_valid['predictions'] = [ast.literal_eval(pred) for pred in df_valid.predictions]

df_testing = pd.read_csv(result_folder +'/df_testing.csv')
df_testing['predictions'] = [ast.literal_eval(pred) for pred in df_testing.predictions]

#Get optimal threshold from validation data 
thresholds = list(range(0,100,5))#[30, 50, 55, 65, 70, 85, 90]#)
#thresholds = np.linspace(50, 70, 50).tolist()

mAP_results = []
for _,thresh in enumerate(thresholds):

  maP,train_binary, train_label, valid_binary, valid_label = mAP_values(df_training,df_valid,thresh, percentile = True,topk=100)
  mAP_results.append(maP)



data = {'mAP': mAP_results,
        'threshold': thresholds}

df = pd.DataFrame(data)

# Find the index of the maximum mAP value
max_map_index = df['mAP'].idxmax()

# Retrieve the threshold corresponding to the maximum mAP
threshold_max_map = df.loc[max_map_index, 'threshold']

maP_valid,train_binary, train_label, valid_binary, valid_label = mAP_values(df_training,df_valid,thresh = threshold_max_map, percentile = True,topk=100)

maP_test,train_binary, train_label, test_binary, test_label = mAP_values(df_training,df_testing,thresh = threshold_max_map, percentile = True, topk=100)

# Plot the line curve
plt.plot(thresholds, mAP_results,  linestyle='-',color = 'red')
plt.xlabel('Threshold (Percentile)')
plt.ylabel('mAP')
plt.show()

print('The optimal threshold is: ', threshold_max_map)
print('The Best Validation mAP is: ',maP_valid)

print('At the optimal threshold: ', threshold_max_map)
print('The Test  mAP is: ',maP_test)
```


###### Model Predictions overview


```{python}

# Create a figure and subplots
fig, axes = plt.subplots(1, 2, figsize=(13, 5))

# Plot 1: KDE curves for each label_code
for label_code in range(4):
    dff = df_testing.query(f'label_code == {label_code}')
    out_array_test = []
    dd_test = np.array([out_array_test.extend(np.array(out)) for _, out in enumerate(dff.predictions)])
    out_array_test = np.array(out_array_test)
    sns.kdeplot(out_array_test, label=f'{dic_labels_rev[label_code]}', ax=axes[0])

# Customize plot 1
axes[0].set_xlim(-1, 1)
axes[0].set_xlabel('Value')
axes[0].set_ylabel('Density')
axes[0].set_title('KDE Curves for Each Galaxy')


# Plot 2: KDE curve for all predictions
out_array_test = []
dd_test = np.array([out_array_test.extend(np.array(out)) for _, out in enumerate(df_testing.predictions)])
out_array_test = np.array(out_array_test)
sns.kdeplot(out_array_test, color='r', ax=axes[1])

# Customize plot 2
axes[1].set_xlim(-1, 1)
axes[1].set_xlabel('Value')
axes[1].set_ylabel('Density')
axes[1].set_title('KDE Curves for All Galaxies')

# Adjust the spacing between subplots
plt.tight_layout()

# Show the plot
plt.show()
```


###### T-SNE projections

```{python}

fig, axes = plt.subplots(1, 3, figsize=(17, 5))

# Plot 1: Training data
array_dat = []
for i in range(df_training['predictions'].shape[0]):
    array_dat.append(list(df_training['predictions'].iloc[i]))
array_dat = np.array(array_dat)
y = df_training.lable_name
tsne = TSNE(n_components=2, random_state=42)
z = tsne.fit_transform(array_dat)
df = pd.DataFrame()
df["y"] = y
df["comp-1"] = z[:,0]
df["comp-2"] = z[:,1]
sns.scatterplot(x="comp-1", y="comp-2", hue=df.y.tolist(), palette=sns.color_palette("hls", 4), data=df, ax=axes[0]).set(title="Train: T-SNE projection")

# Plot 2: Validation data
array_dat = []
for i in range(df_valid['predictions'].shape[0]):
    array_dat.append(list(df_valid['predictions'].iloc[i]))
array_dat = np.array(array_dat)
y = df_valid.lable_name
tsne = TSNE(n_components=2, random_state=42)
z = tsne.fit_transform(array_dat)
df = pd.DataFrame()
df["y"] = y
df["comp-1"] = z[:,0]
df["comp-2"] = z[:,1]
sns.scatterplot(x="comp-1", y="comp-2", hue=df.y.tolist(), palette=sns.color_palette("hls", 4), data=df, ax=axes[1]).set(title="Valid: T-SNE projection")

# Plot 3: Testing data
array_dat = []
for i in range(df_testing['predictions'].shape[0]):
    array_dat.append(list(df_testing['predictions'].iloc[i]))
array_dat = np.array(array_dat)
y = df_testing.lable_name
tsne = TSNE(n_components=2, random_state=42)
z = tsne.fit_transform(array_dat)
df = pd.DataFrame()
df["y"] = y
df["comp-1"] = z[:,0]
df["comp-2"] = z[:,1]
sns.scatterplot(x="comp-1", y="comp-2", hue=df.y.tolist(), palette=sns.color_palette("hls", 4), data=df, ax=axes[2]).set(title="Test: T-SNE projection")

plt.tight_layout()
plt.show()

```


:::



:::


::: 

